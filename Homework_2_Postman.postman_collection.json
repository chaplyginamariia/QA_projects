{
	"info": {
		"_postman_id": "28385eda-26fd-43df-8eac-694b7a8e1a88",
		"name": "Homework_2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"token\", jsonData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "maria",
							"type": "text"
						},
						{
							"key": "password",
							"value": "maria123",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}login",
					"host": [
						"{{url}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test #1\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test #2\r",
							"const schema = {\r",
							"    \"type\":\"object\",\r",
							"    \"properties\": {\r",
							"        \"person\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"u_age\": {\"type\": \"integer\"},\r",
							"                \"u_name\" : {\r",
							"                    \"type\": \"array\",\r",
							"                    \"items\": [\r",
							"                        {\"type\": \"string\"},\r",
							"                        {\"type\": \"integer\"},\r",
							"                        {\"type\": \"integer\"}\r",
							"                    ]\r",
							"                },\r",
							"                \"u_salary_1_5_year\": {\"type\": \"integer\"}\r",
							"            },\r",
							"            \"required\": [\"u_age\", \"u_name\", \"u_salary_1_5_year\"]\r",
							"        },\r",
							"        \"qa_salary_after_12_months\": {\"type\": \"integer\"},\r",
							"        \"qa_salary_after_6_months\": {\"type\": \"integer\"},\r",
							"        \"start_qa_salary\": {\"type\": \"integer\"}\r",
							"    },\r",
							"    \"required\": [\"person\", \"qa_salary_after_12_months\", \"qa_salary_after_6_months\", \"start_qa_salary\"]\r",
							"}\r",
							"pm.test('Structure is valid', function() {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// Test #3\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.variables.set(\"name\", \"maria\");\r",
							"pm.variables.set(\"salary\", 500);\r",
							"pm.variables.set(\"age\", 20);\r",
							"\r",
							"pm.test(\"Checking coefficients\", function () {\r",
							"    pm.expect(response.start_qa_salary).to.eql(pm.variables.get(\"salary\"));\r",
							"    pm.expect(response.qa_salary_after_6_months).to.eql(pm.variables.get(\"salary\") * 2);\r",
							"    pm.expect(response.qa_salary_after_12_months).to.eql(pm.variables.get(\"salary\") * 2.9);\r",
							"    pm.expect(response.person.u_salary_1_5_year).to.eql(pm.variables.get(\"salary\") * 4);\r",
							"})\r",
							"\r",
							"// Test #4\r",
							"pm.test(\"u_salary_1_5_year\", function () {\r",
							"let uSalaryOneYearAndHalf = response.person.u_salary_1_5_year;\r",
							"postman.setEnvironmentVariable(\"u_salary_1_5_year\", uSalaryOneYearAndHalf);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": 20,\r\n    \"salary\": 500,\r\n    \"name\": \"maria\",\r\n    \"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user_info",
					"host": [
						"{{url}}user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test #1\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test #2\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\"type\": \"integer\"},\r",
							"        \"name\": {\"type\": \"string\"},\r",
							"        \"salary\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\" : [\r",
							"                {\"type\": \"integer\"},\r",
							"                {\"type\": \"string\"},\r",
							"                {\"type\": \"string\"}\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\"age\", \"name\", \"salary\"]\r",
							"}\r",
							"pm.test(\"Structure is valid\", function() {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"})\r",
							"\r",
							"// Test #3\r",
							"pm.variables.set(\"name\", \"maria\");\r",
							"pm.variables.set(\"salary\", 500);\r",
							"pm.variables.set(\"age\", 20);\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							" pm.test(\"Checking coefficients\", function () {\r",
							"    pm.expect(response.salary[0]).to.eql(pm.variables.get(\"salary\"));\r",
							"    pm.expect(response.salary[1]).to.eql(((pm.variables.get(\"salary\")) * 2).toString());\r",
							"    pm.expect(response.salary[2]).to.eql(((pm.variables.get(\"salary\")) * 3).toString());\r",
							"})\r",
							"\r",
							"// Test #4\r",
							"pm.test(\"Comparison element 2 with elements number 0 and 1\", function () {\r",
							"pm.expect(parseInt(response.salary[2])).to.be.above(parseInt(response.salary[1]));\r",
							"pm.expect(parseInt(response.salary[2])).to.be.above(response.salary[0]);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "22",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Maria",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}new_data",
					"host": [
						"{{url}}new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test #1\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test #2\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\"type\": \"integer\"},\r",
							"        \"daily_food\": {\"type\": \"number\"},\r",
							"        \"daily_sleep\": {\"type\": \"number\"},\r",
							"        \"name\": {\"type\": \"string\"}\r",
							"    },\r",
							"    \"required\": [\"age\", \"daily_food\", \"daily_sleep\", \"name\"]\r",
							"}\r",
							"pm.test(\"Structure of json is valid\", function(){\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"})\r",
							"const response = pm.response.json();\r",
							"\r",
							"// Test #3\r",
							"pm.variables.set(\"weight\", 52);\r",
							"\r",
							"pm.test(\"Checking coefficients\", function (){\r",
							"    pm.expect(response.daily_food).to.be.equal((pm.variables.get(\"weight\")) * 0.012);\r",
							"    pm.expect(response.daily_sleep).to.be.equal((pm.variables.get(\"weight\")) * 2.5);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "22",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "52",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Maria",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}test_pet_info",
					"host": [
						"{{url}}test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test #1\r",
							"pm.test(\"Status code is 200\", function (){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"\r",
							"// Test #2\r",
							"\r",
							"const schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\"type\": \"string\"},\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\"type\": \"string\"},\r",
							"                {\"type\": \"integer\"}\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\"type\": \"string\"},\r",
							"                {\"type\": \"integer\"}\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\"type\": \"integer\"}\r",
							"      },\r",
							"      \"required\": [\"children\", \"u_salary_1_5_year\"]\r",
							"    },\r",
							"    \"name\": {\"type\": \"string\"},\r",
							"    \"salary\": {\"type\": \"integer\"}\r",
							"  },\r",
							"  \"required\": [\"age\", \"family\", \"name\", \"salary\"]\r",
							"}\r",
							"pm.test(\"Structure of json is valid\", function (){\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"})\r",
							"\r",
							"\r",
							"// Test #3\r",
							"\r",
							"pm.environment.set(\"name\", \"Maria\");\r",
							"const response = pm.response.json();\r",
							"pm.test(\"Name is the same\", function () {\r",
							"pm.expect(response.name).to.eql(pm.environment.get(\"name\"));\r",
							"});\r",
							"\r",
							"// Test #4\r",
							"pm.test(\"Age is the same\", function () {\r",
							"pm.expect(response.age).to.eql(request.data.age);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "22",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1_5_year}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Maria",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}get_test_user",
					"host": [
						"{{url}}get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test #1\r",
							"\r",
							"pm.test(\"Random object from the list\", function(){\r",
							"    let list = JSON.parse(responseBody);\r",
							"    let random_num = _.random(list.length);\r",
							"    console.log(\"Random object from the list is \",(list[random_num]));\r",
							"});\r",
							"\r",
							"pm.test(\"Random Curl_ID from the list\", function(){\r",
							"    let list = JSON.parse(responseBody);\r",
							"    let random_num = _.random(list.length);\r",
							"    let randomId = list[random_num].Cur_ID;\r",
							"    pm.environment.set(\"Cur_ID\", randomId);\r",
							"    console.log(\"Random Curl_ID from the list is \" + randomId);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}currency",
					"host": [
						"{{url}}currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test #1\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// Test #2\r",
							"\r",
							"const schema = {\r",
							"      \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_ID\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"Cur_Scale\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Date\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ]\r",
							"}\r",
							"pm.test(\"Structure of json is valid\", function(){\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						},
						{
							"key": "list",
							"value": "{{list}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}curr_byn",
					"host": [
						"{{url}}curr_byn"
					]
				}
			},
			"response": []
		}
	]
}